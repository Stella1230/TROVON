"ProductBuildVersion"	,	L_13
PROCESSOR_ARCHITECTURE_INTEL	,	V_38
"Windows Server 2008 R2"	,	L_35
", __VERSION__);(NL)#endif /* llvm */(NL)#elif defined(__HP_aCC)(NL)	g_string_append_printf(str, "	,	L_60
");(NL)	get_runtime_pcap_version(str);(NL)(NL)	/* zlib */(NL)#if defined(HAVE_LIBZ) &amp;&amp; !defined(_WIN32)(NL)	g_string_append_printf(str, "	,	L_55
release	,	V_45
wProcessorArchitecture	,	V_35
"\n%s"	,	L_46
"Windows 7"	,	L_34
g_string_append	,	F_2
", __VERSION__);(NL)#elif defined(__llvm__)(NL)	g_string_append_printf(str, "	,	L_58
CFPropertyListCreateFromStream	,	F_20
len	,	V_5
HAVE_CFPROPERTYLISTCREATEWITHSTREAM	,	F_18
_WIN32	,	V_18
PROCESSOR_ARCHITECTURE_AMD64	,	V_36
"Windows Vista"	,	L_32
");(NL)(NL)	get_os_version_info(str);(NL)(NL)#ifndef _WIN32(NL)	/* Locale */(NL)	if ((lang = getenv ("	,	L_51
");(NL)#elif defined(_MSC_FULL_VER)(NL)# if _MSC_FULL_VER &gt; 99999999(NL)	g_string_append_printf(str, "	,	L_68
" %s"	,	L_12
"Windows OT, unknown version %lu.%lu"	,	L_22
CFDictionaryGetValue	,	F_9
"Windows Server 2003"	,	L_27
defined	,	F_26
" x64 Edition"	,	L_28
CFSTR	,	F_23
errno	,	V_42
get_mem_info	,	F_39
uname	,	F_33
guint32	,	T_12
"GetNativeSystemInfo"	,	L_17
",(NL)	    (__SUNPRO_C &gt;&gt; 8) &amp; 0xF, (__SUNPRO_C &gt;&gt; 4) &amp; 0xF);(NL)	if ((__SUNPRO_C &amp; 0xF) != 0)(NL)		g_string_append_printf(str, "	,	L_75
kCFPropertyListImmutable	,	V_17
"Windows 8"	,	L_36
GString	,	T_1
HAVE_SYS_UTSNAME_H	,	V_22
version	,	V_44
SYSTEM_INFO	,	T_10
",(NL)	    __INTEL_COMPILER_BUILD_DATE / 10000,(NL)	    (__INTEL_COMPILER_BUILD_DATE / 100) % 100,(NL)	    __INTEL_COMPILER_BUILD_DATE % 100);(NL)#endif /* __INTEL_COMPILER_BUILD_DATE */(NL)	g_string_append_printf(str, "	,	L_67
str	,	V_1
", __IBMC__ % 10);(NL)#endif /* __IBMC__ */(NL)	g_string_append_printf(str, "	,	L_63
"an unknown OS"	,	L_45
dwLength	,	V_52
CFPropertyListRef	,	T_3
"ProductName"	,	L_9
system_version_plist_path	,	V_13
dwMajorVersion	,	V_30
szCSDVersion	,	V_40
" G_GINT64_MODIFIER "	,	L_48
append_info	,	F_5
get_os_version_info	,	F_25
"(32-bit) "	,	L_2
CFReadStreamRef	,	T_8
CFReadStreamCreateWithFile	,	F_15
"Windows 2000"	,	L_24
",(NL)	    (_MSC_VER / 100) - 6, _MSC_VER % 100);(NL)#elif defined(__SUNPRO_C)(NL)	g_string_append_printf(str, "	,	L_74
CFReadStreamOpen	,	F_17
"with "	,	L_4
_U_	,	V_48
"32-bit "	,	L_31
VER_NT_WORKSTATION	,	V_34
CFString_to_C_string	,	F_12
GLIB_MINOR_VERSION	,	V_6
GetVersionEx	,	F_27
"Windows 98"	,	L_20
CFPropertyListCreateWithStream	,	F_19
"GLib %d.%d.%d"	,	L_5
");(NL)#elif defined(_MSC_VER)(NL)	/* _MSC_FULL_VER not defined, but _MSC_VER defined */(NL)	g_string_append_printf(str, "	,	L_73
" (%s %s)"	,	L_43
",(NL)	    __INTEL_COMPILER / 100, (__INTEL_COMPILER / 10) % 10);(NL)	if ((__INTEL_COMPILER % 10) != 0)(NL)		g_string_append_printf(str, "	,	L_65
key	,	V_9
is_nt_workstation	,	V_37
", lang);(NL)	else(NL)		g_string_append(str, "	,	L_53
CFDictionaryRef	,	V_11
version_dict	,	V_16
server_version_plist_path	,	V_12
GLIB_MICRO_VERSION	,	V_7
get_string_from_dictionary	,	F_8
end_string	,	F_1
CFURLCreateFromFileSystemRepresentation	,	F_14
g_free	,	F_24
",(NL)			       (_MSC_FULL_VER / 1000000) - 6,(NL)			       (_MSC_FULL_VER / 10000) % 100);(NL)#  if (_MSC_FULL_VER % 10000) != 0(NL)	g_string_append_printf(str, "	,	L_71
"unknown Windows version"	,	L_15
", with ""	,	L_47
dwPlatformId	,	V_27
g_string_append_printf	,	F_6
p	,	V_3
",(NL)			       (_MSC_FULL_VER / 10000000) - 6,(NL)			       (_MSC_FULL_VER / 100000) % 100);(NL)#  if (_MSC_FULL_VER % 100000) != 0(NL)	g_string_append_printf(str, "	,	L_69
q	,	V_4
CFURLRef	,	T_7
");(NL)#elif defined(__INTEL_COMPILER)(NL)	g_string_append_printf(str, "	,	L_64
version_plist_file_url	,	V_14
OSVERSIONINFO	,	V_26
wReserved	,	V_39
"/System/Library/CoreServices/ServerVersion.plist"	,	L_7
",(NL)			       _MSC_FULL_VER % 100000);(NL)#  endif(NL)# else(NL)	g_string_append_printf(str, "	,	L_70
"\n"	,	L_1
"%s %s"	,	L_44
GetSystemInfo	,	F_31
version_plist_stream	,	V_15
"Windows Server 2008"	,	L_33
"%s"	,	L_10
do_cpuid	,	F_36
CFStringRef	,	T_4
"ProductUserVisibleVersion"	,	L_11
size_t	,	T_2
OSVERSIONINFOEX	,	T_9
utsname	,	V_23
CFStringGetTypeID	,	F_11
");(NL)#endif(NL)(NL)	end_string(str);(NL)}(NL)(NL)/*(NL) * Get copyright information.(NL) */(NL)const char *(NL)get_copyright_info(void)(NL){(NL)	return(NL)"	,	L_77
GetModuleHandle	,	F_29
nExIds	,	V_50
", __INTEL_COMPILER % 10);(NL)#ifdef __INTEL_COMPILER_BUILD_DATE(NL)	g_string_sprinta(str, "	,	L_66
"(64-bit) "	,	L_3
cfstring	,	V_10
CFRelease	,	F_16
gboolean	,	T_5
"GLib (version unknown)"	,	L_6
", build %s"	,	L_14
"64-bit "	,	L_30
dict	,	V_8
", __VERSION__);(NL)#else /* boring old GCC */(NL)	g_string_append_printf(str, "	,	L_59
", zlibVersion());(NL)#endif(NL)(NL)	/* Additional application-dependent information */(NL)	if (additional_info)(NL)		(*additional_info)(str);(NL)(NL)	g_string_append(str, "	,	L_56
"Unknown Windows platform %lu version %lu.%lu"	,	L_38
", build %lu"	,	L_39
"Windows XP"	,	L_25
info	,	V_19
GlobalMemoryStatusEx	,	F_40
"/System/Library/CoreServices/SystemVersion.plist"	,	L_8
CFDictionaryGetTypeID	,	F_21
" "	,	L_49
"%s %s.%s"	,	L_42
"Windows NT, unknown version %lu.%lu"	,	L_29
"Windows NT %lu.%lu"	,	L_23
CPUBrandString	,	V_49
", __HP_aCC);(NL)#elif defined(__xlC__)(NL)	g_string_append_printf(str, "	,	L_61
",(NL)			       _MSC_FULL_VER % 10000);(NL)#  endif(NL)# endif(NL)	g_string_append_printf(str, "	,	L_72
"unknown OS version (uname failed - %s)"	,	L_40
", statex.ullTotalPhys/(1024*1024));(NL)#endif(NL)(NL)}(NL)(NL)/*(NL) * Get various library run-time versions, and the OS version, and append(NL) * them to the specified GString.(NL) */(NL)void(NL)get_runtime_version_info(GString *str, void (*additional_info)(GString *))(NL){(NL)#ifndef _WIN32(NL)	gchar *lang;(NL)#endif(NL)(NL)	g_string_append(str, "	,	L_50
VER_PLATFORM_WIN32s	,	V_28
GLIB_MAJOR_VERSION	,	F_7
VER_PLATFORM_WIN32_WINDOWS	,	V_29
utf_16to8	,	F_32
",(NL)	    (__xlC__ &gt;&gt; 8) &amp; 0xFF, __xlC__ &amp; 0xFF);(NL)#ifdef __IBMC__(NL)	if ((__IBMC__ % 10) != 0)(NL)		g_string_append_printf(str, "	,	L_62
"kernel32.dll"	,	L_16
sysname	,	V_43
name	,	V_24
"Windows Server 2012"	,	L_37
MEMORYSTATUSEX	,	T_13
");(NL)(NL)	/* CPU Info */(NL)	get_cpu_info(str);(NL)(NL)	/* Get info about installed memory Windows only */(NL)	get_mem_info(str);(NL)(NL)	/* Compiler info */(NL)(NL)	/*(NL)	 * See https://sourceforge.net/apps/mediawiki/predef/index.php?title=Compilers(NL)	 * information on various defined strings.(NL)	 *(NL)	 * GCC's __VERSION__ is a nice text string for humans to(NL)	 * read.  The page at sourceforge.net largely describes(NL)	 * numeric #defines that encode the version; if the compiler(NL)	 * doesn't also offer a nice printable string, we try prettifying(NL)	 * the number somehow.(NL)	 */(NL)#if defined(__GNUC__) &amp;&amp; defined(__VERSION__)(NL)	/*(NL)	 * Clang and llvm-gcc also define __GNUC__ and __VERSION__;(NL)	 * distinguish between them.(NL)	 */(NL)#if defined(__clang__)(NL)	g_string_append_printf(str, "	,	L_57
"(NL)"	,	L_78
dwBuildNumber	,	V_41
CPUInfo	,	V_46
system_info	,	V_20
get_compiled_version_info	,	F_3
wProductType	,	V_33
", __SUNPRO_C &amp; 0xF);(NL)	g_string_append_printf(str, "	,	L_76
statex	,	V_51
point	,	V_2
UInt8	,	T_6
VER_PLATFORM_WIN32_NT	,	V_32
nativesi_func	,	V_21
_T	,	F_30
__cpuid	,	F_37
GetProcAddress	,	F_28
"Windows 3.1 with Win32s"	,	L_18
"Windows XP Professional x64 Edition"	,	L_26
HAVE_OS_X_FRAMEWORKS	,	F_35
selector	,	V_47
"Windows Me"	,	L_21
CFGetTypeID	,	F_10
dwOSVersionInfoSize	,	V_25
dwMinorVersion	,	V_31
get_os_x_version_info	,	F_13
"AIX"	,	L_41
")) != NULL)(NL)		g_string_append_printf(str, "	,	L_52
nativesi_func_ptr	,	T_11
get_cpu_info	,	F_38
prepend_info	,	F_4
"Windows 95"	,	L_19
");(NL)#endif(NL)(NL)	/* Libpcap */(NL)	g_string_append(str, "	,	L_54
g_strerror	,	F_34
CFReadStreamClose	,	F_22
