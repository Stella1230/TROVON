");(NL)    gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);(NL)(NL)    manuf_hashtable = get_manuf_hashtable();(NL)    if(manuf_hashtable){(NL)        g_snprintf(string_buff, ADDRESS_STR_MAX, "	,	L_21
gtk_text_buffer_insert_at_cursor	,	F_6
",(NL)                   ipv4_hash_table_entry-&gt;ip,(NL)                   ipv4_hash_table_entry-&gt;name);(NL)(NL)        gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);(NL)    }(NL)(NL)}(NL)(NL)(NL)(NL)static void(NL)ipv6_hash_table_to_texbuff(gpointer key _U_, gpointer value, gpointer user_data)(NL){(NL)    gchar string_buff[ADDRESS_STR_MAX];(NL)    GtkTextBuffer *buffer = (GtkTextBuffer*)user_data;(NL)    hashipv6_t *ipv6_hash_table_entry = (hashipv6_t *)value;(NL)(NL)    g_snprintf(string_buff, ADDRESS_STR_MAX, "	,	L_8
", wmem_map_size(eth_hashtable));(NL)        gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);(NL)        wmem_map_foreach( eth_hashtable, eth_hash_to_texbuff, buffer);(NL)    }(NL)(NL)    g_snprintf(string_buff, ADDRESS_STR_MAX, "	,	L_20
", G_CALLBACK(window_cancel_button_cb), addr_resolution_dlg_w); /* act as cxl */(NL)    gtk_widget_set_sensitive (ok_bt, TRUE);(NL)(NL)    cancel_bt = (GtkWidget *)g_object_get_data (G_OBJECT(bbox), GTK_STOCK_CANCEL);(NL)    window_set_cancel_button (addr_resolution_dlg_w, cancel_bt, window_cancel_button_cb);(NL)(NL)    help_bt = (GtkWidget *)g_object_get_data (G_OBJECT(bbox), GTK_STOCK_HELP);(NL)#if 0(NL)    g_signal_connect (help_bt, "	,	L_26
");(NL)    gtk_widget_set_size_request (addr_resolution_dlg_w, 750, 350);(NL)    gtk_window_set_resizable (GTK_WINDOW (addr_resolution_dlg_w), TRUE);(NL)    gtk_container_set_border_width (GTK_CONTAINER (addr_resolution_dlg_w), DLG_OUTER_MARGIN);(NL)(NL)    vbox = ws_gtk_box_new(GTK_ORIENTATION_VERTICAL, DLG_UNRELATED_SPACING, FALSE);(NL)    gtk_container_add (GTK_CONTAINER (addr_resolution_dlg_w), vbox);(NL)    gtk_widget_show (vbox);(NL)(NL)    view = gtk_text_view_new ();(NL)    gtk_text_view_set_wrap_mode(GTK_TEXT_VIEW(view), GTK_WRAP_WORD);(NL)    buffer = gtk_text_view_get_buffer (GTK_TEXT_VIEW (view));(NL)#if GTK_CHECK_VERSION(3, 0, 0)(NL)    gtk_widget_override_font(view, user_font_get_regular());(NL)#else(NL)    gtk_widget_modify_font(view, user_font_get_regular());(NL)#endif(NL)    gtk_widget_show (view);(NL)(NL)    scroll = gtk_scrolled_window_new(NULL, NULL);(NL)    gtk_scrolled_window_set_policy(GTK_SCROLLED_WINDOW(scroll),(NL)            GTK_POLICY_NEVER, GTK_POLICY_AUTOMATIC);(NL)    gtk_container_add(GTK_CONTAINER(scroll), view);(NL)    gtk_widget_show(scroll);(NL)    gtk_box_pack_start(GTK_BOX (vbox), scroll, TRUE, TRUE, 0);(NL)(NL)    /* Get the address list */(NL)    addres_resolution_to_texbuff(buffer);(NL)(NL)    /* Button row. */(NL)    bbox = dlg_button_row_new (GTK_STOCK_OK, GTK_STOCK_CANCEL, GTK_STOCK_HELP, NULL);(NL)    gtk_box_pack_end (GTK_BOX(vbox), bbox, FALSE, FALSE, 0);(NL)(NL)    ok_bt = (GtkWidget *)g_object_get_data (G_OBJECT(bbox), GTK_STOCK_OK);(NL)    g_signal_connect(ok_bt, "	,	L_25
hashether_t	,	T_5
hashmanuf_t	,	T_6
ADDRESS_STR_MAX	,	V_5
buffer	,	V_6
", wmem_map_size(manuf_hashtable));(NL)        gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);(NL)        wmem_map_foreach( manuf_hashtable, manuf_hash_to_texbuff, buffer);(NL)    }(NL)(NL)    g_snprintf(string_buff, ADDRESS_STR_MAX, "	,	L_22
manuf_hash_to_texbuff	,	F_7
serv_port_t	,	T_7
");(NL)    gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);(NL)(NL)    serv_port_hashtable = get_serv_port_hashtable();(NL)    if(serv_port_hashtable){(NL)        g_snprintf(string_buff, ADDRESS_STR_MAX, "	,	L_17
user_data	,	V_3
eth_as_gint	,	V_10
",(NL)                   ipv6_hash_table_entry-&gt;ip6,(NL)                   ipv6_hash_table_entry-&gt;name);(NL)(NL)        gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);(NL)    }(NL)(NL)}(NL)(NL)static void(NL)addres_resolution_to_texbuff(GtkTextBuffer *buffer)(NL){(NL)    gchar string_buff[ADDRESS_STR_MAX];(NL)    wmem_map_t *manuf_hashtable;(NL)    wmem_map_t *wka_hashtable;(NL)    wmem_map_t *eth_hashtable;(NL)    wmem_map_t *serv_port_hashtable;(NL)    wmem_map_t *ipv4_hash_table;(NL)    wmem_map_t *ipv6_hash_table;(NL)(NL)    g_snprintf(string_buff, ADDRESS_STR_MAX, "	,	L_10
"%.2X:%.2X:%.2X  %s\n"	,	L_2
string_buff	,	V_4
port	,	V_13
",(NL)               ipv6_hash_table_entry-&gt;ip6,(NL)               ipv6_hash_table_entry-&gt;name);(NL)(NL)    gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);(NL)(NL)}(NL)(NL)static void(NL)ipv6_hash_table_resolved_to_texbuff(gpointer key _U_, gpointer value, gpointer user_data)(NL){(NL)    gchar string_buff[ADDRESS_STR_MAX];(NL)    GtkTextBuffer *buffer = (GtkTextBuffer*)user_data;(NL)    hashipv6_t *ipv6_hash_table_entry = (hashipv6_t *)value;(NL)(NL)    if((ipv6_hash_table_entry-&gt;flags &amp; DUMMY_ADDRESS_ENTRY)== 0){(NL)        g_snprintf(string_buff, ADDRESS_STR_MAX, "	,	L_9
name	,	V_11
get_hash_ether_resolved_name	,	F_5
",(NL)               addr,(NL)               ipv4_hash_table_entry-&gt;ip,(NL)               ipv4_hash_table_entry-&gt;name);(NL)(NL)    gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);(NL)(NL)}(NL)(NL)static void(NL)ipv4_hash_table_resolved_to_texbuff(gpointer key _U_, gpointer value, gpointer user_data)(NL){(NL)    gchar string_buff[ADDRESS_STR_MAX];(NL)    GtkTextBuffer *buffer = (GtkTextBuffer*)user_data;(NL)    hashipv4_t *ipv4_hash_table_entry = (hashipv4_t *)value;(NL)(NL)    if((ipv4_hash_table_entry-&gt;flags &amp; DUMMY_ADDRESS_ENTRY)== 0){(NL)        g_snprintf(string_buff, ADDRESS_STR_MAX, "	,	L_7
");(NL)    gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);(NL)(NL)    if(ipv4_hash_table){(NL)        g_snprintf(string_buff, ADDRESS_STR_MAX, "	,	L_13
", wmem_map_size(ipv6_hash_table));(NL)        gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);(NL)        wmem_map_foreach( ipv6_hash_table, ipv6_hash_table_to_texbuff, buffer);(NL)    }(NL)(NL)(NL)    g_snprintf(string_buff, ADDRESS_STR_MAX, "	,	L_16
""	,	L_5
get_hash_manuf_resolved_name	,	F_8
"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X Status: %u %s %s\n"	,	L_1
serv_port_hash_to_texbuff	,	F_10
");(NL)    gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);(NL)(NL)    if(ipv6_hash_table){(NL)        g_snprintf(string_buff, ADDRESS_STR_MAX, "	,	L_15
",/* G_CALLBACK(topic_cb)*/NULL, /*(gpointer)HELP_MANUAL_ADDR_RESOLVE_DIALOG*/NULL);(NL)#endif(NL)    gtk_widget_set_sensitive (help_bt, FALSE);(NL)(NL)    gtk_widget_grab_default (ok_bt);(NL)    /*g_signal_connect (addr_resolution_dlg_w, "	,	L_27
manuf	,	V_9
", wmem_map_size(wka_hashtable));(NL)        gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);(NL)        wmem_map_foreach( wka_hashtable, wka_hash_to_texbuff, buffer);(NL)    }(NL)(NL)(NL)}(NL)(NL)void(NL)addr_resolution_dlg (GtkAction *action _U_, gpointer data _U_)(NL){(NL)(NL)    GtkWidget *vbox;(NL)    GtkWidget *view;(NL)    GtkWidget *scroll;(NL)    GtkWidget *bbox;(NL)    GtkWidget *ok_bt, *cancel_bt, *help_bt;(NL)    GtkTextBuffer *buffer;(NL)(NL)    addr_resolution_dlg_w = dlg_window_new ("	,	L_24
gpointer	,	T_1
GtkTextBuffer	,	T_3
g_snprintf	,	F_2
", wmem_map_size(ipv4_hash_table));(NL)        gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);(NL)        wmem_map_foreach( ipv4_hash_table, ipv4_hash_table_to_texbuff, buffer);(NL)    }(NL)(NL)    g_snprintf(string_buff, ADDRESS_STR_MAX, "	,	L_14
", cfile.filename);(NL)    gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);(NL)(NL)    /* Dump the v4 addresses first, then v6 */(NL)    ipv4_hash_table = get_ipv4_hash_table();(NL)    if(ipv4_hash_table){(NL)        wmem_map_foreach( ipv4_hash_table, ipv4_hash_table_resolved_to_texbuff, buffer);(NL)    }(NL)(NL)    ipv6_hash_table = get_ipv6_hash_table();(NL)    if(ipv6_hash_table){(NL)        wmem_map_foreach( ipv6_hash_table, ipv6_hash_table_resolved_to_texbuff, buffer);(NL)    }(NL)(NL)    g_snprintf(string_buff, ADDRESS_STR_MAX, "	,	L_12
value	,	V_2
key	,	V_1
eth_addr	,	V_7
eth_hash_to_texbuff	,	F_1
wka_hash_to_texbuff	,	F_9
");(NL)    gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);(NL)(NL)    eth_hashtable = get_eth_hashtable();(NL)    if(eth_hashtable){(NL)        g_snprintf(string_buff, ADDRESS_STR_MAX, "	,	L_19
serv_port_table	,	V_12
");(NL)    gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);(NL)(NL)    wka_hashtable = get_wka_hashtable();(NL)    if(wka_hashtable){(NL)        g_snprintf(string_buff, ADDRESS_STR_MAX, "	,	L_23
gchar	,	T_2
"Port %u \n""	,	L_4
");(NL)    gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);(NL)    g_snprintf(string_buff, ADDRESS_STR_MAX, "	,	L_11
get_hash_ether_status	,	F_3
"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X  %s\n"	,	L_3
",(NL)               port,(NL)               serv_port_table-&gt;tcp_name,(NL)               serv_port_table-&gt;udp_name,(NL)               serv_port_table-&gt;sctp_name,(NL)               serv_port_table-&gt;dccp_name);(NL)(NL)    gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);(NL)(NL)}(NL)(NL)static void(NL)ipv4_hash_table_to_texbuff(gpointer key, gpointer value, gpointer user_data)(NL){(NL)    gchar string_buff[ADDRESS_STR_MAX];(NL)    GtkTextBuffer *buffer = (GtkTextBuffer*)user_data;(NL)    hashipv4_t *ipv4_hash_table_entry = (hashipv4_t *)value;(NL)    int addr = GPOINTER_TO_UINT(key);(NL)(NL)    g_snprintf(string_buff, ADDRESS_STR_MAX, "	,	L_6
", wmem_map_size(serv_port_hashtable));(NL)        gtk_text_buffer_insert_at_cursor (buffer, string_buff, -1);(NL)        wmem_map_foreach( serv_port_hashtable, serv_port_hash_to_texbuff, buffer);(NL)    }(NL)(NL)    g_snprintf(string_buff, ADDRESS_STR_MAX, "	,	L_18
guint8	,	T_4
tp	,	V_8
get_hash_ether_hexaddr	,	F_4
